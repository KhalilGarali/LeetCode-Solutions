using System;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using NHunspell;

namespace HunspellSpellCheckDemo
{
    public partial class MainWindow : Window
    {
        private Hunspell _hunspell;

        public MainWindow()
        {
            InitializeComponent();
            InitializeHunspell();
            richTextBox.TextChanged += RichTextBox_TextChanged;
        }

        private void InitializeHunspell()
        {
            string dictionaryFolder = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Dictionaries");
            string affFile = Path.Combine(dictionaryFolder, "en_US.aff");
            string dicFile = Path.Combine(dictionaryFolder, "en_US.dic");

            if (File.Exists(affFile) && File.Exists(dicFile))
            {
                _hunspell = new Hunspell(affFile, dicFile);
            }
            else
            {
                MessageBox.Show("Dictionary files not found. Please add them to the Dictionaries folder.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RichTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (_hunspell == null) return;

            var textRange = new TextRange(richTextBox.Document.ContentStart, richTextBox.Document.ContentEnd);
            var words = textRange.Text.Split(new[] { ' ', '\n', '\t', '.', ',', ';', ':' }, StringSplitOptions.RemoveEmptyEntries);

            richTextBox.TextChanged -= RichTextBox_TextChanged; // Prevent recursive calls
            ClearSpellCheckHighlights();

            foreach (string word in words)
            {
                if (!_hunspell.Spell(word))
                {
                    UnderlineMisspelledWord(word);
                }
            }

            richTextBox.TextChanged += RichTextBox_TextChanged;
        }

        private void UnderlineMisspelledWord(string word)
        {
            TextRange range = FindWordRange(word);
            if (range != null)
            {
                range.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.Red);
                range.ApplyPropertyValue(TextElement.TextDecorationsProperty, TextDecorations.Underline);
                range.Tag = word; // Store the original word for suggestions
            }
        }

        private TextRange FindWordRange(string word)
        {
            TextPointer position = richTextBox.Document.ContentStart;
            while (position != null && position.CompareTo(richTextBox.Document.ContentEnd) < 0)
            {
                if (position.GetPointerContext(LogicalDirection.Forward) == TextPointerContext.Text)
                {
                    string textRun = position.GetTextInRun(LogicalDirection.Forward);
                    int index = textRun.IndexOf(word, StringComparison.OrdinalIgnoreCase);
                    if (index >= 0)
                    {
                        TextPointer start = position.GetPositionAtOffset(index);
                        TextPointer end = start?.GetPositionAtOffset(word.Length);
                        if (start != null && end != null)
                        {
                            return new TextRange(start, end);
                        }
                    }
                }
                position = position.GetNextContextPosition(LogicalDirection.Forward);
            }
            return null;
        }

        private void ClearSpellCheckHighlights()
        {
            TextRange documentRange = new TextRange(richTextBox.Document.ContentStart, richTextBox.Document.ContentEnd);
            documentRange.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.Black);
            documentRange.ApplyPropertyValue(TextElement.TextDecorationsProperty, null);
        }

        private void RichTextBox_ContextMenuOpening(object sender, ContextMenuEventArgs e)
        {
            var position = richTextBox.GetPositionFromPoint(Mouse.GetPosition(richTextBox), true);
            if (position == null) return;

            TextRange wordRange = GetWordRangeAtPosition(position);
            if (wordRange != null && _hunspell != null && !_hunspell.Spell(wordRange.Text))
            {
                var suggestions = _hunspell.Suggest(wordRange.Text);
                if (suggestions.Any())
                {
                    var contextMenu = new ContextMenu();
                    foreach (var suggestion in suggestions.Take(5))
                    {
                        var menuItem = new MenuItem
                        {
                            Header = suggestion,
                            Tag = wordRange
                        };
                        menuItem.Click += SuggestionMenuItem_Click;
                        contextMenu.Items.Add(menuItem);
                    }
                    e.Handled = true;
                    richTextBox.ContextMenu = contextMenu;
                }
            }
        }

        private TextRange GetWordRangeAtPosition(TextPointer position)
        {
            TextPointer start = position.GetPositionAtOffset(0, LogicalDirection.Backward);
            TextPointer end = position.GetPositionAtOffset(0, LogicalDirection.Forward);

            while (start != null && !IsWordCharacter(start))
            {
                start = start.GetNextContextPosition(LogicalDirection.Forward);
            }

            while (end != null && !IsWordCharacter(end))
            {
                end = end.GetNextContextPosition(LogicalDirection.Backward);
            }

            return start != null && end != null ? new TextRange(start, end) : null;
        }

        private static bool IsWordCharacter(TextPointer position)
        {
            if (position == null) return false;
            string text = position.GetTextInRun(LogicalDirection.Forward);
            return !string.IsNullOrWhiteSpace(text) && !char.IsPunctuation(text[0]);
        }

        private void SuggestionMenuItem_Click(object sender, RoutedEventArgs e)
        {
            if (sender is MenuItem menuItem && menuItem.Tag is TextRange wordRange)
            {
                wordRange.Text = menuItem.Header.ToString();
            }
        }

        protected override void OnClosed(EventArgs e)
        {
            base.OnClosed(e);
            _hunspell?.Dispose();
        }
    }
}
